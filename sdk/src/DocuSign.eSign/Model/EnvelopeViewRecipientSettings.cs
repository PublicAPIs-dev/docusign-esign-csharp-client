/* 
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// EnvelopeViewRecipientSettings
    /// </summary>
    [DataContract]
    public partial class EnvelopeViewRecipientSettings :  IEquatable<EnvelopeViewRecipientSettings>, IValidatableObject
    {
        public EnvelopeViewRecipientSettings()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopeViewRecipientSettings" /> class.
        /// </summary>
        /// <param name="ShowBulkSend">ShowBulkSend.</param>
        /// <param name="ShowContactsList">ShowContactsList.</param>
        /// <param name="ShowEditMessage">ShowEditMessage.</param>
        /// <param name="ShowEditRecipients">ShowEditRecipients.</param>
        public EnvelopeViewRecipientSettings(string ShowBulkSend = default(string), string ShowContactsList = default(string), string ShowEditMessage = default(string), string ShowEditRecipients = default(string))
        {
            this.ShowBulkSend = ShowBulkSend;
            this.ShowContactsList = ShowContactsList;
            this.ShowEditMessage = ShowEditMessage;
            this.ShowEditRecipients = ShowEditRecipients;
        }
        
        /// <summary>
        /// Gets or Sets ShowBulkSend
        /// </summary>
        [DataMember(Name="showBulkSend", EmitDefaultValue=false)]
        public string ShowBulkSend { get; set; }
        /// <summary>
        /// Gets or Sets ShowContactsList
        /// </summary>
        [DataMember(Name="showContactsList", EmitDefaultValue=false)]
        public string ShowContactsList { get; set; }
        /// <summary>
        /// Gets or Sets ShowEditMessage
        /// </summary>
        [DataMember(Name="showEditMessage", EmitDefaultValue=false)]
        public string ShowEditMessage { get; set; }
        /// <summary>
        /// Gets or Sets ShowEditRecipients
        /// </summary>
        [DataMember(Name="showEditRecipients", EmitDefaultValue=false)]
        public string ShowEditRecipients { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvelopeViewRecipientSettings {\n");
            sb.Append("  ShowBulkSend: ").Append(ShowBulkSend).Append("\n");
            sb.Append("  ShowContactsList: ").Append(ShowContactsList).Append("\n");
            sb.Append("  ShowEditMessage: ").Append(ShowEditMessage).Append("\n");
            sb.Append("  ShowEditRecipients: ").Append(ShowEditRecipients).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EnvelopeViewRecipientSettings);
        }

        /// <summary>
        /// Returns true if EnvelopeViewRecipientSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of EnvelopeViewRecipientSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvelopeViewRecipientSettings other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ShowBulkSend == other.ShowBulkSend ||
                    this.ShowBulkSend != null &&
                    this.ShowBulkSend.Equals(other.ShowBulkSend)
                ) && 
                (
                    this.ShowContactsList == other.ShowContactsList ||
                    this.ShowContactsList != null &&
                    this.ShowContactsList.Equals(other.ShowContactsList)
                ) && 
                (
                    this.ShowEditMessage == other.ShowEditMessage ||
                    this.ShowEditMessage != null &&
                    this.ShowEditMessage.Equals(other.ShowEditMessage)
                ) && 
                (
                    this.ShowEditRecipients == other.ShowEditRecipients ||
                    this.ShowEditRecipients != null &&
                    this.ShowEditRecipients.Equals(other.ShowEditRecipients)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ShowBulkSend != null)
                    hash = hash * 59 + this.ShowBulkSend.GetHashCode();
                if (this.ShowContactsList != null)
                    hash = hash * 59 + this.ShowContactsList.GetHashCode();
                if (this.ShowEditMessage != null)
                    hash = hash * 59 + this.ShowEditMessage.GetHashCode();
                if (this.ShowEditRecipients != null)
                    hash = hash * 59 + this.ShowEditRecipients.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}

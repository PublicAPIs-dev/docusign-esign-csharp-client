/* 
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// DocGenFormFieldResponse
    /// </summary>
    [DataContract]
    public partial class DocGenFormFieldResponse :  IEquatable<DocGenFormFieldResponse>, IValidatableObject
    {
        public DocGenFormFieldResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocGenFormFieldResponse" /> class.
        /// </summary>
        /// <param name="DocGenFormFields">DocGenFormFields.</param>
        /// <param name="ErrorDetails">Array or errors..</param>
        public DocGenFormFieldResponse(List<DocGenFormFields> DocGenFormFields = default(List<DocGenFormFields>), ErrorDetails ErrorDetails = default(ErrorDetails))
        {
            this.DocGenFormFields = DocGenFormFields;
            this.ErrorDetails = ErrorDetails;
        }
        
        /// <summary>
        /// Gets or Sets DocGenFormFields
        /// </summary>
        [DataMember(Name="docGenFormFields", EmitDefaultValue=false)]
        public List<DocGenFormFields> DocGenFormFields { get; set; }
        /// <summary>
        /// Array or errors.
        /// </summary>
        /// <value>Array or errors.</value>
        [DataMember(Name="errorDetails", EmitDefaultValue=false)]
        public ErrorDetails ErrorDetails { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocGenFormFieldResponse {\n");
            sb.Append("  DocGenFormFields: ").Append(DocGenFormFields).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DocGenFormFieldResponse);
        }

        /// <summary>
        /// Returns true if DocGenFormFieldResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of DocGenFormFieldResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocGenFormFieldResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DocGenFormFields == other.DocGenFormFields ||
                    this.DocGenFormFields != null &&
                    this.DocGenFormFields.SequenceEqual(other.DocGenFormFields)
                ) && 
                (
                    this.ErrorDetails == other.ErrorDetails ||
                    this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(other.ErrorDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DocGenFormFields != null)
                    hash = hash * 59 + this.DocGenFormFields.GetHashCode();
                if (this.ErrorDetails != null)
                    hash = hash * 59 + this.ErrorDetails.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}

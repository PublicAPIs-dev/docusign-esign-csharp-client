/* 
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// PaletteSettings
    /// </summary>
    [DataContract]
    public partial class PaletteSettings :  IEquatable<PaletteSettings>, IValidatableObject
    {
        public PaletteSettings()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaletteSettings" /> class.
        /// </summary>
        /// <param name="Annotations">Annotations.</param>
        /// <param name="Custom">Custom.</param>
        /// <param name="Merge">Merge.</param>
        /// <param name="Notary">Notary.</param>
        /// <param name="Seals">Seals.</param>
        /// <param name="SmartContracts">SmartContracts.</param>
        /// <param name="SmartSections">SmartSections.</param>
        public PaletteSettings(PaletteItemSettings Annotations = default(PaletteItemSettings), PaletteItemSettings Custom = default(PaletteItemSettings), PaletteItemSettings Merge = default(PaletteItemSettings), PaletteItemSettings Notary = default(PaletteItemSettings), PaletteItemSettings Seals = default(PaletteItemSettings), PaletteItemSettings SmartContracts = default(PaletteItemSettings), PaletteItemSettings SmartSections = default(PaletteItemSettings))
        {
            this.Annotations = Annotations;
            this.Custom = Custom;
            this.Merge = Merge;
            this.Notary = Notary;
            this.Seals = Seals;
            this.SmartContracts = SmartContracts;
            this.SmartSections = SmartSections;
        }
        
        /// <summary>
        /// Gets or Sets Annotations
        /// </summary>
        [DataMember(Name="annotations", EmitDefaultValue=false)]
        public PaletteItemSettings Annotations { get; set; }
        /// <summary>
        /// Gets or Sets Custom
        /// </summary>
        [DataMember(Name="custom", EmitDefaultValue=false)]
        public PaletteItemSettings Custom { get; set; }
        /// <summary>
        /// Gets or Sets Merge
        /// </summary>
        [DataMember(Name="merge", EmitDefaultValue=false)]
        public PaletteItemSettings Merge { get; set; }
        /// <summary>
        /// Gets or Sets Notary
        /// </summary>
        [DataMember(Name="notary", EmitDefaultValue=false)]
        public PaletteItemSettings Notary { get; set; }
        /// <summary>
        /// Gets or Sets Seals
        /// </summary>
        [DataMember(Name="seals", EmitDefaultValue=false)]
        public PaletteItemSettings Seals { get; set; }
        /// <summary>
        /// Gets or Sets SmartContracts
        /// </summary>
        [DataMember(Name="smartContracts", EmitDefaultValue=false)]
        public PaletteItemSettings SmartContracts { get; set; }
        /// <summary>
        /// Gets or Sets SmartSections
        /// </summary>
        [DataMember(Name="smartSections", EmitDefaultValue=false)]
        public PaletteItemSettings SmartSections { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaletteSettings {\n");
            sb.Append("  Annotations: ").Append(Annotations).Append("\n");
            sb.Append("  Custom: ").Append(Custom).Append("\n");
            sb.Append("  Merge: ").Append(Merge).Append("\n");
            sb.Append("  Notary: ").Append(Notary).Append("\n");
            sb.Append("  Seals: ").Append(Seals).Append("\n");
            sb.Append("  SmartContracts: ").Append(SmartContracts).Append("\n");
            sb.Append("  SmartSections: ").Append(SmartSections).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PaletteSettings);
        }

        /// <summary>
        /// Returns true if PaletteSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of PaletteSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaletteSettings other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Annotations == other.Annotations ||
                    this.Annotations != null &&
                    this.Annotations.Equals(other.Annotations)
                ) && 
                (
                    this.Custom == other.Custom ||
                    this.Custom != null &&
                    this.Custom.Equals(other.Custom)
                ) && 
                (
                    this.Merge == other.Merge ||
                    this.Merge != null &&
                    this.Merge.Equals(other.Merge)
                ) && 
                (
                    this.Notary == other.Notary ||
                    this.Notary != null &&
                    this.Notary.Equals(other.Notary)
                ) && 
                (
                    this.Seals == other.Seals ||
                    this.Seals != null &&
                    this.Seals.Equals(other.Seals)
                ) && 
                (
                    this.SmartContracts == other.SmartContracts ||
                    this.SmartContracts != null &&
                    this.SmartContracts.Equals(other.SmartContracts)
                ) && 
                (
                    this.SmartSections == other.SmartSections ||
                    this.SmartSections != null &&
                    this.SmartSections.Equals(other.SmartSections)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Annotations != null)
                    hash = hash * 59 + this.Annotations.GetHashCode();
                if (this.Custom != null)
                    hash = hash * 59 + this.Custom.GetHashCode();
                if (this.Merge != null)
                    hash = hash * 59 + this.Merge.GetHashCode();
                if (this.Notary != null)
                    hash = hash * 59 + this.Notary.GetHashCode();
                if (this.Seals != null)
                    hash = hash * 59 + this.Seals.GetHashCode();
                if (this.SmartContracts != null)
                    hash = hash * 59 + this.SmartContracts.GetHashCode();
                if (this.SmartSections != null)
                    hash = hash * 59 + this.SmartSections.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}

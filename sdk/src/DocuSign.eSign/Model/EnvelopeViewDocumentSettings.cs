/* 
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// EnvelopeViewDocumentSettings
    /// </summary>
    [DataContract]
    public partial class EnvelopeViewDocumentSettings :  IEquatable<EnvelopeViewDocumentSettings>, IValidatableObject
    {
        public EnvelopeViewDocumentSettings()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopeViewDocumentSettings" /> class.
        /// </summary>
        /// <param name="ShowEditDocuments">ShowEditDocuments.</param>
        /// <param name="ShowEditDocumentVisibility">ShowEditDocumentVisibility.</param>
        /// <param name="ShowEditPages">ShowEditPages.</param>
        /// <param name="ShowSaveAsDocumentCustomField">ShowSaveAsDocumentCustomField.</param>
        public EnvelopeViewDocumentSettings(string ShowEditDocuments = default(string), string ShowEditDocumentVisibility = default(string), string ShowEditPages = default(string), string ShowSaveAsDocumentCustomField = default(string))
        {
            this.ShowEditDocuments = ShowEditDocuments;
            this.ShowEditDocumentVisibility = ShowEditDocumentVisibility;
            this.ShowEditPages = ShowEditPages;
            this.ShowSaveAsDocumentCustomField = ShowSaveAsDocumentCustomField;
        }
        
        /// <summary>
        /// Gets or Sets ShowEditDocuments
        /// </summary>
        [DataMember(Name="showEditDocuments", EmitDefaultValue=false)]
        public string ShowEditDocuments { get; set; }
        /// <summary>
        /// Gets or Sets ShowEditDocumentVisibility
        /// </summary>
        [DataMember(Name="showEditDocumentVisibility", EmitDefaultValue=false)]
        public string ShowEditDocumentVisibility { get; set; }
        /// <summary>
        /// Gets or Sets ShowEditPages
        /// </summary>
        [DataMember(Name="showEditPages", EmitDefaultValue=false)]
        public string ShowEditPages { get; set; }
        /// <summary>
        /// Gets or Sets ShowSaveAsDocumentCustomField
        /// </summary>
        [DataMember(Name="showSaveAsDocumentCustomField", EmitDefaultValue=false)]
        public string ShowSaveAsDocumentCustomField { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvelopeViewDocumentSettings {\n");
            sb.Append("  ShowEditDocuments: ").Append(ShowEditDocuments).Append("\n");
            sb.Append("  ShowEditDocumentVisibility: ").Append(ShowEditDocumentVisibility).Append("\n");
            sb.Append("  ShowEditPages: ").Append(ShowEditPages).Append("\n");
            sb.Append("  ShowSaveAsDocumentCustomField: ").Append(ShowSaveAsDocumentCustomField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EnvelopeViewDocumentSettings);
        }

        /// <summary>
        /// Returns true if EnvelopeViewDocumentSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of EnvelopeViewDocumentSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvelopeViewDocumentSettings other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ShowEditDocuments == other.ShowEditDocuments ||
                    this.ShowEditDocuments != null &&
                    this.ShowEditDocuments.Equals(other.ShowEditDocuments)
                ) && 
                (
                    this.ShowEditDocumentVisibility == other.ShowEditDocumentVisibility ||
                    this.ShowEditDocumentVisibility != null &&
                    this.ShowEditDocumentVisibility.Equals(other.ShowEditDocumentVisibility)
                ) && 
                (
                    this.ShowEditPages == other.ShowEditPages ||
                    this.ShowEditPages != null &&
                    this.ShowEditPages.Equals(other.ShowEditPages)
                ) && 
                (
                    this.ShowSaveAsDocumentCustomField == other.ShowSaveAsDocumentCustomField ||
                    this.ShowSaveAsDocumentCustomField != null &&
                    this.ShowSaveAsDocumentCustomField.Equals(other.ShowSaveAsDocumentCustomField)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ShowEditDocuments != null)
                    hash = hash * 59 + this.ShowEditDocuments.GetHashCode();
                if (this.ShowEditDocumentVisibility != null)
                    hash = hash * 59 + this.ShowEditDocumentVisibility.GetHashCode();
                if (this.ShowEditPages != null)
                    hash = hash * 59 + this.ShowEditPages.GetHashCode();
                if (this.ShowSaveAsDocumentCustomField != null)
                    hash = hash * 59 + this.ShowSaveAsDocumentCustomField.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}

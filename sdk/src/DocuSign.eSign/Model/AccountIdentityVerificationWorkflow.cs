/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// Specifies an Identity Verification workflow.
    /// </summary>
    [DataContract]
    public partial class AccountIdentityVerificationWorkflow :  IEquatable<AccountIdentityVerificationWorkflow>, IValidatableObject
    {
        public AccountIdentityVerificationWorkflow()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountIdentityVerificationWorkflow" /> class.
        /// </summary>
        /// <param name="DefaultDescription">DefaultDescription.</param>
        /// <param name="DefaultName">DefaultName.</param>
        /// <param name="InputOptions">InputOptions.</param>
        /// <param name="IsDisabled">IsDisabled.</param>
        /// <param name="OwnerType">OwnerType.</param>
        /// <param name="SignatureProvider">The signature provider associated with the Identity Verification workflow..</param>
        /// <param name="Steps">Steps.</param>
        /// <param name="WorkflowId">WorkflowId.</param>
        /// <param name="WorkflowLabel">WorkflowLabel.</param>
        /// <param name="WorkflowResourceKey">WorkflowResourceKey.</param>
        public AccountIdentityVerificationWorkflow(string DefaultDescription = default(string), string DefaultName = default(string), List<AccountIdentityInputOption> InputOptions = default(List<AccountIdentityInputOption>), string IsDisabled = default(string), string OwnerType = default(string), AccountSignatureProvider SignatureProvider = default(AccountSignatureProvider), List<AccountIdentityVerificationStep> Steps = default(List<AccountIdentityVerificationStep>), string WorkflowId = default(string), string WorkflowLabel = default(string), string WorkflowResourceKey = default(string))
        {
            this.DefaultDescription = DefaultDescription;
            this.DefaultName = DefaultName;
            this.InputOptions = InputOptions;
            this.IsDisabled = IsDisabled;
            this.OwnerType = OwnerType;
            this.SignatureProvider = SignatureProvider;
            this.Steps = Steps;
            this.WorkflowId = WorkflowId;
            this.WorkflowLabel = WorkflowLabel;
            this.WorkflowResourceKey = WorkflowResourceKey;
        }
        
        /// <summary>
        /// Gets or Sets DefaultDescription
        /// </summary>
        [DataMember(Name="defaultDescription", EmitDefaultValue=false)]
        public string DefaultDescription { get; set; }
        /// <summary>
        /// Gets or Sets DefaultName
        /// </summary>
        [DataMember(Name="defaultName", EmitDefaultValue=false)]
        public string DefaultName { get; set; }
        /// <summary>
        /// Gets or Sets InputOptions
        /// </summary>
        [DataMember(Name="inputOptions", EmitDefaultValue=false)]
        public List<AccountIdentityInputOption> InputOptions { get; set; }
        /// <summary>
        /// Gets or Sets IsDisabled
        /// </summary>
        [DataMember(Name="isDisabled", EmitDefaultValue=false)]
        public string IsDisabled { get; set; }
        /// <summary>
        /// Gets or Sets OwnerType
        /// </summary>
        [DataMember(Name="ownerType", EmitDefaultValue=false)]
        public string OwnerType { get; set; }
        /// <summary>
        /// The signature provider associated with the Identity Verification workflow.
        /// </summary>
        /// <value>The signature provider associated with the Identity Verification workflow.</value>
        [DataMember(Name="signatureProvider", EmitDefaultValue=false)]
        public AccountSignatureProvider SignatureProvider { get; set; }
        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [DataMember(Name="steps", EmitDefaultValue=false)]
        public List<AccountIdentityVerificationStep> Steps { get; set; }
        /// <summary>
        /// Gets or Sets WorkflowId
        /// </summary>
        [DataMember(Name="workflowId", EmitDefaultValue=false)]
        public string WorkflowId { get; set; }
        /// <summary>
        /// Gets or Sets WorkflowLabel
        /// </summary>
        [DataMember(Name="workflowLabel", EmitDefaultValue=false)]
        public string WorkflowLabel { get; set; }
        /// <summary>
        /// Gets or Sets WorkflowResourceKey
        /// </summary>
        [DataMember(Name="workflowResourceKey", EmitDefaultValue=false)]
        public string WorkflowResourceKey { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountIdentityVerificationWorkflow {\n");
            sb.Append("  DefaultDescription: ").Append(DefaultDescription).Append("\n");
            sb.Append("  DefaultName: ").Append(DefaultName).Append("\n");
            sb.Append("  InputOptions: ").Append(InputOptions).Append("\n");
            sb.Append("  IsDisabled: ").Append(IsDisabled).Append("\n");
            sb.Append("  OwnerType: ").Append(OwnerType).Append("\n");
            sb.Append("  SignatureProvider: ").Append(SignatureProvider).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  WorkflowId: ").Append(WorkflowId).Append("\n");
            sb.Append("  WorkflowLabel: ").Append(WorkflowLabel).Append("\n");
            sb.Append("  WorkflowResourceKey: ").Append(WorkflowResourceKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AccountIdentityVerificationWorkflow);
        }

        /// <summary>
        /// Returns true if AccountIdentityVerificationWorkflow instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountIdentityVerificationWorkflow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountIdentityVerificationWorkflow other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DefaultDescription == other.DefaultDescription ||
                    this.DefaultDescription != null &&
                    this.DefaultDescription.Equals(other.DefaultDescription)
                ) && 
                (
                    this.DefaultName == other.DefaultName ||
                    this.DefaultName != null &&
                    this.DefaultName.Equals(other.DefaultName)
                ) && 
                (
                    this.InputOptions == other.InputOptions ||
                    this.InputOptions != null &&
                    this.InputOptions.SequenceEqual(other.InputOptions)
                ) && 
                (
                    this.IsDisabled == other.IsDisabled ||
                    this.IsDisabled != null &&
                    this.IsDisabled.Equals(other.IsDisabled)
                ) && 
                (
                    this.OwnerType == other.OwnerType ||
                    this.OwnerType != null &&
                    this.OwnerType.Equals(other.OwnerType)
                ) && 
                (
                    this.SignatureProvider == other.SignatureProvider ||
                    this.SignatureProvider != null &&
                    this.SignatureProvider.Equals(other.SignatureProvider)
                ) && 
                (
                    this.Steps == other.Steps ||
                    this.Steps != null &&
                    this.Steps.SequenceEqual(other.Steps)
                ) && 
                (
                    this.WorkflowId == other.WorkflowId ||
                    this.WorkflowId != null &&
                    this.WorkflowId.Equals(other.WorkflowId)
                ) && 
                (
                    this.WorkflowLabel == other.WorkflowLabel ||
                    this.WorkflowLabel != null &&
                    this.WorkflowLabel.Equals(other.WorkflowLabel)
                ) && 
                (
                    this.WorkflowResourceKey == other.WorkflowResourceKey ||
                    this.WorkflowResourceKey != null &&
                    this.WorkflowResourceKey.Equals(other.WorkflowResourceKey)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DefaultDescription != null)
                    hash = hash * 59 + this.DefaultDescription.GetHashCode();
                if (this.DefaultName != null)
                    hash = hash * 59 + this.DefaultName.GetHashCode();
                if (this.InputOptions != null)
                    hash = hash * 59 + this.InputOptions.GetHashCode();
                if (this.IsDisabled != null)
                    hash = hash * 59 + this.IsDisabled.GetHashCode();
                if (this.OwnerType != null)
                    hash = hash * 59 + this.OwnerType.GetHashCode();
                if (this.SignatureProvider != null)
                    hash = hash * 59 + this.SignatureProvider.GetHashCode();
                if (this.Steps != null)
                    hash = hash * 59 + this.Steps.GetHashCode();
                if (this.WorkflowId != null)
                    hash = hash * 59 + this.WorkflowId.GetHashCode();
                if (this.WorkflowLabel != null)
                    hash = hash * 59 + this.WorkflowLabel.GetHashCode();
                if (this.WorkflowResourceKey != null)
                    hash = hash * 59 + this.WorkflowResourceKey.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}

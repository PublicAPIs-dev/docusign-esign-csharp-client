/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// DocGenFormFields
    /// </summary>
    [DataContract]
    public partial class DocGenFormFields :  IEquatable<DocGenFormFields>, IValidatableObject
    {
        public DocGenFormFields()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocGenFormFields" /> class.
        /// </summary>
        /// <param name="DocGenDocumentStatus">DocGenDocumentStatus.</param>
        /// <param name="DocGenErrors">DocGenErrors.</param>
        /// <param name="DocGenFormFieldList">DocGenFormFieldList.</param>
        /// <param name="DocumentId">Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute..</param>
        public DocGenFormFields(string DocGenDocumentStatus = default(string), List<DocGenSyntaxError> DocGenErrors = default(List<DocGenSyntaxError>), List<DocGenFormField> DocGenFormFieldList = default(List<DocGenFormField>), string DocumentId = default(string))
        {
            this.DocGenDocumentStatus = DocGenDocumentStatus;
            this.DocGenErrors = DocGenErrors;
            this.DocGenFormFieldList = DocGenFormFieldList;
            this.DocumentId = DocumentId;
        }
        
        /// <summary>
        /// Gets or Sets DocGenDocumentStatus
        /// </summary>
        [DataMember(Name="docGenDocumentStatus", EmitDefaultValue=false)]
        public string DocGenDocumentStatus { get; set; }
        /// <summary>
        /// Gets or Sets DocGenErrors
        /// </summary>
        [DataMember(Name="docGenErrors", EmitDefaultValue=false)]
        public List<DocGenSyntaxError> DocGenErrors { get; set; }
        /// <summary>
        /// Gets or Sets DocGenFormFieldList
        /// </summary>
        [DataMember(Name="docGenFormFieldList", EmitDefaultValue=false)]
        public List<DocGenFormField> DocGenFormFieldList { get; set; }
        /// <summary>
        /// Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute.
        /// </summary>
        /// <value>Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute.</value>
        [DataMember(Name="documentId", EmitDefaultValue=false)]
        public string DocumentId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocGenFormFields {\n");
            sb.Append("  DocGenDocumentStatus: ").Append(DocGenDocumentStatus).Append("\n");
            sb.Append("  DocGenErrors: ").Append(DocGenErrors).Append("\n");
            sb.Append("  DocGenFormFieldList: ").Append(DocGenFormFieldList).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DocGenFormFields);
        }

        /// <summary>
        /// Returns true if DocGenFormFields instances are equal
        /// </summary>
        /// <param name="other">Instance of DocGenFormFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocGenFormFields other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DocGenDocumentStatus == other.DocGenDocumentStatus ||
                    this.DocGenDocumentStatus != null &&
                    this.DocGenDocumentStatus.Equals(other.DocGenDocumentStatus)
                ) && 
                (
                    this.DocGenErrors == other.DocGenErrors ||
                    this.DocGenErrors != null &&
                    this.DocGenErrors.SequenceEqual(other.DocGenErrors)
                ) && 
                (
                    this.DocGenFormFieldList == other.DocGenFormFieldList ||
                    this.DocGenFormFieldList != null &&
                    this.DocGenFormFieldList.SequenceEqual(other.DocGenFormFieldList)
                ) && 
                (
                    this.DocumentId == other.DocumentId ||
                    this.DocumentId != null &&
                    this.DocumentId.Equals(other.DocumentId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DocGenDocumentStatus != null)
                    hash = hash * 59 + this.DocGenDocumentStatus.GetHashCode();
                if (this.DocGenErrors != null)
                    hash = hash * 59 + this.DocGenErrors.GetHashCode();
                if (this.DocGenFormFieldList != null)
                    hash = hash * 59 + this.DocGenFormFieldList.GetHashCode();
                if (this.DocumentId != null)
                    hash = hash * 59 + this.DocumentId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}

/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// This group tab is used to place radio buttons on a document. The &#x60;radios&#x60; property contains a list of [&#x60;radio&#x60;](/docs/esign-rest-api/reference/envelopes/enveloperecipienttabs/) objects  associated with the group. Only one radio button can be selected in a group. 
    /// </summary>
    [DataContract]
    public partial class RadioGroup :  IEquatable<RadioGroup>, IValidatableObject
    {
        public RadioGroup()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RadioGroup" /> class.
        /// </summary>
        /// <param name="ConditionalParentLabel">For conditional fields this is the TabLabel of the parent tab that controls this tab&#39;s visibility..</param>
        /// <param name="ConditionalParentLabelMetadata">Metadata that indicates whether the &#x60;conditionalParentLabel&#x60; property is editable..</param>
        /// <param name="ConditionalParentValue">For conditional fields, this is the value of the parent tab that controls the tab&#39;s visibility.  If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \&quot;on\&quot; as the value to show that the parent tab is active. .</param>
        /// <param name="ConditionalParentValueMetadata">Metadata that indicates whether the &#x60;conditionalParentValue&#x60; property is editable..</param>
        /// <param name="DocumentId">Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute..</param>
        /// <param name="DocumentIdMetadata">Metadata that indicates whether the &#x60;documentId&#x60; property is editable..</param>
        /// <param name="GroupName">The name of the group..</param>
        /// <param name="GroupNameMetadata">Metadata that indicates whether the &#x60;groupName&#x60; property is editable..</param>
        /// <param name="OriginalValue">The initial value of the tab when it was sent to the recipient. .</param>
        /// <param name="OriginalValueMetadata">Metadata that indicates whether the &#x60;originalValue&#x60; property is editable..</param>
        /// <param name="Radios">Specifies the locations and status for radio buttons that are grouped together..</param>
        /// <param name="RecipientId">Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document..</param>
        /// <param name="RecipientIdGuid">RecipientIdGuid.</param>
        /// <param name="RecipientIdGuidMetadata">Metadata that indicates whether the &#x60;recipientIdGuid&#x60; property is editable..</param>
        /// <param name="RecipientIdMetadata">Metadata that indicates whether the &#x60;recipientId&#x60; property is editable..</param>
        /// <param name="RequireAll">When set to **true** and shared is true, information must be entered in this field to complete the envelope. .</param>
        /// <param name="RequireAllMetadata">Metadata that indicates whether the &#x60;requireAll&#x60; property is editable..</param>
        /// <param name="RequireInitialOnSharedChange">Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field..</param>
        /// <param name="RequireInitialOnSharedChangeMetadata">Metadata that indicates whether the &#x60;requireInitialOnSharedChange&#x60; property is editable..</param>
        /// <param name="Shared">When set to **true**, this custom tab is shared..</param>
        /// <param name="SharedMetadata">Metadata that indicates whether the &#x60;shared&#x60; property is editable..</param>
        /// <param name="ShareToRecipients">ShareToRecipients.</param>
        /// <param name="ShareToRecipientsMetadata">Reserved for DocuSign..</param>
        /// <param name="TabType">TabType.</param>
        /// <param name="TabTypeMetadata">Metadata that indicates whether the &#x60;tabType&#x60; property is editable..</param>
        /// <param name="TemplateLocked">When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. .</param>
        /// <param name="TemplateLockedMetadata">Metadata that indicates whether the &#x60;templateLocked&#x60; property is editable..</param>
        /// <param name="TemplateRequired">When set to **true**, the sender may not remove the recipient. Used only when working with template recipients..</param>
        /// <param name="TemplateRequiredMetadata">Metadata that indicates whether the &#x60;templateRequired&#x60; property is editable..</param>
        /// <param name="Tooltip">Tooltip.</param>
        /// <param name="TooltipMetadata">Metadata that indicates whether the &#x60;tooltip&#x60; property is editable..</param>
        /// <param name="Value">Specifies the value of the tab. .</param>
        /// <param name="ValueMetadata">Metadata that indicates whether the &#x60;value&#x60; property is editable..</param>
        public RadioGroup(string ConditionalParentLabel = default(string), PropertyMetadata ConditionalParentLabelMetadata = default(PropertyMetadata), string ConditionalParentValue = default(string), PropertyMetadata ConditionalParentValueMetadata = default(PropertyMetadata), string DocumentId = default(string), PropertyMetadata DocumentIdMetadata = default(PropertyMetadata), string GroupName = default(string), PropertyMetadata GroupNameMetadata = default(PropertyMetadata), string OriginalValue = default(string), PropertyMetadata OriginalValueMetadata = default(PropertyMetadata), List<Radio> Radios = default(List<Radio>), string RecipientId = default(string), string RecipientIdGuid = default(string), PropertyMetadata RecipientIdGuidMetadata = default(PropertyMetadata), PropertyMetadata RecipientIdMetadata = default(PropertyMetadata), string RequireAll = default(string), PropertyMetadata RequireAllMetadata = default(PropertyMetadata), string RequireInitialOnSharedChange = default(string), PropertyMetadata RequireInitialOnSharedChangeMetadata = default(PropertyMetadata), string Shared = default(string), PropertyMetadata SharedMetadata = default(PropertyMetadata), string ShareToRecipients = default(string), PropertyMetadata ShareToRecipientsMetadata = default(PropertyMetadata), string TabType = default(string), PropertyMetadata TabTypeMetadata = default(PropertyMetadata), string TemplateLocked = default(string), PropertyMetadata TemplateLockedMetadata = default(PropertyMetadata), string TemplateRequired = default(string), PropertyMetadata TemplateRequiredMetadata = default(PropertyMetadata), string Tooltip = default(string), PropertyMetadata TooltipMetadata = default(PropertyMetadata), string Value = default(string), PropertyMetadata ValueMetadata = default(PropertyMetadata))
        {
            this.ConditionalParentLabel = ConditionalParentLabel;
            this.ConditionalParentLabelMetadata = ConditionalParentLabelMetadata;
            this.ConditionalParentValue = ConditionalParentValue;
            this.ConditionalParentValueMetadata = ConditionalParentValueMetadata;
            this.DocumentId = DocumentId;
            this.DocumentIdMetadata = DocumentIdMetadata;
            this.GroupName = GroupName;
            this.GroupNameMetadata = GroupNameMetadata;
            this.OriginalValue = OriginalValue;
            this.OriginalValueMetadata = OriginalValueMetadata;
            this.Radios = Radios;
            this.RecipientId = RecipientId;
            this.RecipientIdGuid = RecipientIdGuid;
            this.RecipientIdGuidMetadata = RecipientIdGuidMetadata;
            this.RecipientIdMetadata = RecipientIdMetadata;
            this.RequireAll = RequireAll;
            this.RequireAllMetadata = RequireAllMetadata;
            this.RequireInitialOnSharedChange = RequireInitialOnSharedChange;
            this.RequireInitialOnSharedChangeMetadata = RequireInitialOnSharedChangeMetadata;
            this.Shared = Shared;
            this.SharedMetadata = SharedMetadata;
            this.ShareToRecipients = ShareToRecipients;
            this.ShareToRecipientsMetadata = ShareToRecipientsMetadata;
            this.TabType = TabType;
            this.TabTypeMetadata = TabTypeMetadata;
            this.TemplateLocked = TemplateLocked;
            this.TemplateLockedMetadata = TemplateLockedMetadata;
            this.TemplateRequired = TemplateRequired;
            this.TemplateRequiredMetadata = TemplateRequiredMetadata;
            this.Tooltip = Tooltip;
            this.TooltipMetadata = TooltipMetadata;
            this.Value = Value;
            this.ValueMetadata = ValueMetadata;
        }
        
        /// <summary>
        /// For conditional fields this is the TabLabel of the parent tab that controls this tab&#39;s visibility.
        /// </summary>
        /// <value>For conditional fields this is the TabLabel of the parent tab that controls this tab&#39;s visibility.</value>
        [DataMember(Name="conditionalParentLabel", EmitDefaultValue=false)]
        public string ConditionalParentLabel { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;conditionalParentLabel&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;conditionalParentLabel&#x60; property is editable.</value>
        [DataMember(Name="conditionalParentLabelMetadata", EmitDefaultValue=false)]
        public PropertyMetadata ConditionalParentLabelMetadata { get; set; }
        /// <summary>
        /// For conditional fields, this is the value of the parent tab that controls the tab&#39;s visibility.  If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \&quot;on\&quot; as the value to show that the parent tab is active. 
        /// </summary>
        /// <value>For conditional fields, this is the value of the parent tab that controls the tab&#39;s visibility.  If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \&quot;on\&quot; as the value to show that the parent tab is active. </value>
        [DataMember(Name="conditionalParentValue", EmitDefaultValue=false)]
        public string ConditionalParentValue { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;conditionalParentValue&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;conditionalParentValue&#x60; property is editable.</value>
        [DataMember(Name="conditionalParentValueMetadata", EmitDefaultValue=false)]
        public PropertyMetadata ConditionalParentValueMetadata { get; set; }
        /// <summary>
        /// Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute.
        /// </summary>
        /// <value>Specifies the document ID number that the tab is placed on. This must refer to an existing Document&#39;s ID attribute.</value>
        [DataMember(Name="documentId", EmitDefaultValue=false)]
        public string DocumentId { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;documentId&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;documentId&#x60; property is editable.</value>
        [DataMember(Name="documentIdMetadata", EmitDefaultValue=false)]
        public PropertyMetadata DocumentIdMetadata { get; set; }
        /// <summary>
        /// The name of the group.
        /// </summary>
        /// <value>The name of the group.</value>
        [DataMember(Name="groupName", EmitDefaultValue=false)]
        public string GroupName { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;groupName&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;groupName&#x60; property is editable.</value>
        [DataMember(Name="groupNameMetadata", EmitDefaultValue=false)]
        public PropertyMetadata GroupNameMetadata { get; set; }
        /// <summary>
        /// The initial value of the tab when it was sent to the recipient. 
        /// </summary>
        /// <value>The initial value of the tab when it was sent to the recipient. </value>
        [DataMember(Name="originalValue", EmitDefaultValue=false)]
        public string OriginalValue { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;originalValue&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;originalValue&#x60; property is editable.</value>
        [DataMember(Name="originalValueMetadata", EmitDefaultValue=false)]
        public PropertyMetadata OriginalValueMetadata { get; set; }
        /// <summary>
        /// Specifies the locations and status for radio buttons that are grouped together.
        /// </summary>
        /// <value>Specifies the locations and status for radio buttons that are grouped together.</value>
        [DataMember(Name="radios", EmitDefaultValue=false)]
        public List<Radio> Radios { get; set; }
        /// <summary>
        /// Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
        /// </summary>
        /// <value>Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.</value>
        [DataMember(Name="recipientId", EmitDefaultValue=false)]
        public string RecipientId { get; set; }
        /// <summary>
        /// Gets or Sets RecipientIdGuid
        /// </summary>
        [DataMember(Name="recipientIdGuid", EmitDefaultValue=false)]
        public string RecipientIdGuid { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;recipientIdGuid&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;recipientIdGuid&#x60; property is editable.</value>
        [DataMember(Name="recipientIdGuidMetadata", EmitDefaultValue=false)]
        public PropertyMetadata RecipientIdGuidMetadata { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;recipientId&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;recipientId&#x60; property is editable.</value>
        [DataMember(Name="recipientIdMetadata", EmitDefaultValue=false)]
        public PropertyMetadata RecipientIdMetadata { get; set; }
        /// <summary>
        /// When set to **true** and shared is true, information must be entered in this field to complete the envelope. 
        /// </summary>
        /// <value>When set to **true** and shared is true, information must be entered in this field to complete the envelope. </value>
        [DataMember(Name="requireAll", EmitDefaultValue=false)]
        public string RequireAll { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;requireAll&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;requireAll&#x60; property is editable.</value>
        [DataMember(Name="requireAllMetadata", EmitDefaultValue=false)]
        public PropertyMetadata RequireAllMetadata { get; set; }
        /// <summary>
        /// Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.
        /// </summary>
        /// <value>Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.</value>
        [DataMember(Name="requireInitialOnSharedChange", EmitDefaultValue=false)]
        public string RequireInitialOnSharedChange { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;requireInitialOnSharedChange&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;requireInitialOnSharedChange&#x60; property is editable.</value>
        [DataMember(Name="requireInitialOnSharedChangeMetadata", EmitDefaultValue=false)]
        public PropertyMetadata RequireInitialOnSharedChangeMetadata { get; set; }
        /// <summary>
        /// When set to **true**, this custom tab is shared.
        /// </summary>
        /// <value>When set to **true**, this custom tab is shared.</value>
        [DataMember(Name="shared", EmitDefaultValue=false)]
        public string Shared { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;shared&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;shared&#x60; property is editable.</value>
        [DataMember(Name="sharedMetadata", EmitDefaultValue=false)]
        public PropertyMetadata SharedMetadata { get; set; }
        /// <summary>
        /// Gets or Sets ShareToRecipients
        /// </summary>
        [DataMember(Name="shareToRecipients", EmitDefaultValue=false)]
        public string ShareToRecipients { get; set; }
        /// <summary>
        /// Reserved for DocuSign.
        /// </summary>
        /// <value>Reserved for DocuSign.</value>
        [DataMember(Name="shareToRecipientsMetadata", EmitDefaultValue=false)]
        public PropertyMetadata ShareToRecipientsMetadata { get; set; }
        /// <summary>
        /// Gets or Sets TabType
        /// </summary>
        [DataMember(Name="tabType", EmitDefaultValue=false)]
        public string TabType { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;tabType&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;tabType&#x60; property is editable.</value>
        [DataMember(Name="tabTypeMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TabTypeMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
        /// </summary>
        /// <value>When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. </value>
        [DataMember(Name="templateLocked", EmitDefaultValue=false)]
        public string TemplateLocked { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;templateLocked&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;templateLocked&#x60; property is editable.</value>
        [DataMember(Name="templateLockedMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TemplateLockedMetadata { get; set; }
        /// <summary>
        /// When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
        /// </summary>
        /// <value>When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.</value>
        [DataMember(Name="templateRequired", EmitDefaultValue=false)]
        public string TemplateRequired { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;templateRequired&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;templateRequired&#x60; property is editable.</value>
        [DataMember(Name="templateRequiredMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TemplateRequiredMetadata { get; set; }
        /// <summary>
        /// Gets or Sets Tooltip
        /// </summary>
        [DataMember(Name="tooltip", EmitDefaultValue=false)]
        public string Tooltip { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;tooltip&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;tooltip&#x60; property is editable.</value>
        [DataMember(Name="tooltipMetadata", EmitDefaultValue=false)]
        public PropertyMetadata TooltipMetadata { get; set; }
        /// <summary>
        /// Specifies the value of the tab. 
        /// </summary>
        /// <value>Specifies the value of the tab. </value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Metadata that indicates whether the &#x60;value&#x60; property is editable.
        /// </summary>
        /// <value>Metadata that indicates whether the &#x60;value&#x60; property is editable.</value>
        [DataMember(Name="valueMetadata", EmitDefaultValue=false)]
        public PropertyMetadata ValueMetadata { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RadioGroup {\n");
            sb.Append("  ConditionalParentLabel: ").Append(ConditionalParentLabel).Append("\n");
            sb.Append("  ConditionalParentLabelMetadata: ").Append(ConditionalParentLabelMetadata).Append("\n");
            sb.Append("  ConditionalParentValue: ").Append(ConditionalParentValue).Append("\n");
            sb.Append("  ConditionalParentValueMetadata: ").Append(ConditionalParentValueMetadata).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  DocumentIdMetadata: ").Append(DocumentIdMetadata).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  GroupNameMetadata: ").Append(GroupNameMetadata).Append("\n");
            sb.Append("  OriginalValue: ").Append(OriginalValue).Append("\n");
            sb.Append("  OriginalValueMetadata: ").Append(OriginalValueMetadata).Append("\n");
            sb.Append("  Radios: ").Append(Radios).Append("\n");
            sb.Append("  RecipientId: ").Append(RecipientId).Append("\n");
            sb.Append("  RecipientIdGuid: ").Append(RecipientIdGuid).Append("\n");
            sb.Append("  RecipientIdGuidMetadata: ").Append(RecipientIdGuidMetadata).Append("\n");
            sb.Append("  RecipientIdMetadata: ").Append(RecipientIdMetadata).Append("\n");
            sb.Append("  RequireAll: ").Append(RequireAll).Append("\n");
            sb.Append("  RequireAllMetadata: ").Append(RequireAllMetadata).Append("\n");
            sb.Append("  RequireInitialOnSharedChange: ").Append(RequireInitialOnSharedChange).Append("\n");
            sb.Append("  RequireInitialOnSharedChangeMetadata: ").Append(RequireInitialOnSharedChangeMetadata).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  SharedMetadata: ").Append(SharedMetadata).Append("\n");
            sb.Append("  ShareToRecipients: ").Append(ShareToRecipients).Append("\n");
            sb.Append("  ShareToRecipientsMetadata: ").Append(ShareToRecipientsMetadata).Append("\n");
            sb.Append("  TabType: ").Append(TabType).Append("\n");
            sb.Append("  TabTypeMetadata: ").Append(TabTypeMetadata).Append("\n");
            sb.Append("  TemplateLocked: ").Append(TemplateLocked).Append("\n");
            sb.Append("  TemplateLockedMetadata: ").Append(TemplateLockedMetadata).Append("\n");
            sb.Append("  TemplateRequired: ").Append(TemplateRequired).Append("\n");
            sb.Append("  TemplateRequiredMetadata: ").Append(TemplateRequiredMetadata).Append("\n");
            sb.Append("  Tooltip: ").Append(Tooltip).Append("\n");
            sb.Append("  TooltipMetadata: ").Append(TooltipMetadata).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ValueMetadata: ").Append(ValueMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RadioGroup);
        }

        /// <summary>
        /// Returns true if RadioGroup instances are equal
        /// </summary>
        /// <param name="other">Instance of RadioGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RadioGroup other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ConditionalParentLabel == other.ConditionalParentLabel ||
                    this.ConditionalParentLabel != null &&
                    this.ConditionalParentLabel.Equals(other.ConditionalParentLabel)
                ) && 
                (
                    this.ConditionalParentLabelMetadata == other.ConditionalParentLabelMetadata ||
                    this.ConditionalParentLabelMetadata != null &&
                    this.ConditionalParentLabelMetadata.Equals(other.ConditionalParentLabelMetadata)
                ) && 
                (
                    this.ConditionalParentValue == other.ConditionalParentValue ||
                    this.ConditionalParentValue != null &&
                    this.ConditionalParentValue.Equals(other.ConditionalParentValue)
                ) && 
                (
                    this.ConditionalParentValueMetadata == other.ConditionalParentValueMetadata ||
                    this.ConditionalParentValueMetadata != null &&
                    this.ConditionalParentValueMetadata.Equals(other.ConditionalParentValueMetadata)
                ) && 
                (
                    this.DocumentId == other.DocumentId ||
                    this.DocumentId != null &&
                    this.DocumentId.Equals(other.DocumentId)
                ) && 
                (
                    this.DocumentIdMetadata == other.DocumentIdMetadata ||
                    this.DocumentIdMetadata != null &&
                    this.DocumentIdMetadata.Equals(other.DocumentIdMetadata)
                ) && 
                (
                    this.GroupName == other.GroupName ||
                    this.GroupName != null &&
                    this.GroupName.Equals(other.GroupName)
                ) && 
                (
                    this.GroupNameMetadata == other.GroupNameMetadata ||
                    this.GroupNameMetadata != null &&
                    this.GroupNameMetadata.Equals(other.GroupNameMetadata)
                ) && 
                (
                    this.OriginalValue == other.OriginalValue ||
                    this.OriginalValue != null &&
                    this.OriginalValue.Equals(other.OriginalValue)
                ) && 
                (
                    this.OriginalValueMetadata == other.OriginalValueMetadata ||
                    this.OriginalValueMetadata != null &&
                    this.OriginalValueMetadata.Equals(other.OriginalValueMetadata)
                ) && 
                (
                    this.Radios == other.Radios ||
                    this.Radios != null &&
                    this.Radios.SequenceEqual(other.Radios)
                ) && 
                (
                    this.RecipientId == other.RecipientId ||
                    this.RecipientId != null &&
                    this.RecipientId.Equals(other.RecipientId)
                ) && 
                (
                    this.RecipientIdGuid == other.RecipientIdGuid ||
                    this.RecipientIdGuid != null &&
                    this.RecipientIdGuid.Equals(other.RecipientIdGuid)
                ) && 
                (
                    this.RecipientIdGuidMetadata == other.RecipientIdGuidMetadata ||
                    this.RecipientIdGuidMetadata != null &&
                    this.RecipientIdGuidMetadata.Equals(other.RecipientIdGuidMetadata)
                ) && 
                (
                    this.RecipientIdMetadata == other.RecipientIdMetadata ||
                    this.RecipientIdMetadata != null &&
                    this.RecipientIdMetadata.Equals(other.RecipientIdMetadata)
                ) && 
                (
                    this.RequireAll == other.RequireAll ||
                    this.RequireAll != null &&
                    this.RequireAll.Equals(other.RequireAll)
                ) && 
                (
                    this.RequireAllMetadata == other.RequireAllMetadata ||
                    this.RequireAllMetadata != null &&
                    this.RequireAllMetadata.Equals(other.RequireAllMetadata)
                ) && 
                (
                    this.RequireInitialOnSharedChange == other.RequireInitialOnSharedChange ||
                    this.RequireInitialOnSharedChange != null &&
                    this.RequireInitialOnSharedChange.Equals(other.RequireInitialOnSharedChange)
                ) && 
                (
                    this.RequireInitialOnSharedChangeMetadata == other.RequireInitialOnSharedChangeMetadata ||
                    this.RequireInitialOnSharedChangeMetadata != null &&
                    this.RequireInitialOnSharedChangeMetadata.Equals(other.RequireInitialOnSharedChangeMetadata)
                ) && 
                (
                    this.Shared == other.Shared ||
                    this.Shared != null &&
                    this.Shared.Equals(other.Shared)
                ) && 
                (
                    this.SharedMetadata == other.SharedMetadata ||
                    this.SharedMetadata != null &&
                    this.SharedMetadata.Equals(other.SharedMetadata)
                ) && 
                (
                    this.ShareToRecipients == other.ShareToRecipients ||
                    this.ShareToRecipients != null &&
                    this.ShareToRecipients.Equals(other.ShareToRecipients)
                ) && 
                (
                    this.ShareToRecipientsMetadata == other.ShareToRecipientsMetadata ||
                    this.ShareToRecipientsMetadata != null &&
                    this.ShareToRecipientsMetadata.Equals(other.ShareToRecipientsMetadata)
                ) && 
                (
                    this.TabType == other.TabType ||
                    this.TabType != null &&
                    this.TabType.Equals(other.TabType)
                ) && 
                (
                    this.TabTypeMetadata == other.TabTypeMetadata ||
                    this.TabTypeMetadata != null &&
                    this.TabTypeMetadata.Equals(other.TabTypeMetadata)
                ) && 
                (
                    this.TemplateLocked == other.TemplateLocked ||
                    this.TemplateLocked != null &&
                    this.TemplateLocked.Equals(other.TemplateLocked)
                ) && 
                (
                    this.TemplateLockedMetadata == other.TemplateLockedMetadata ||
                    this.TemplateLockedMetadata != null &&
                    this.TemplateLockedMetadata.Equals(other.TemplateLockedMetadata)
                ) && 
                (
                    this.TemplateRequired == other.TemplateRequired ||
                    this.TemplateRequired != null &&
                    this.TemplateRequired.Equals(other.TemplateRequired)
                ) && 
                (
                    this.TemplateRequiredMetadata == other.TemplateRequiredMetadata ||
                    this.TemplateRequiredMetadata != null &&
                    this.TemplateRequiredMetadata.Equals(other.TemplateRequiredMetadata)
                ) && 
                (
                    this.Tooltip == other.Tooltip ||
                    this.Tooltip != null &&
                    this.Tooltip.Equals(other.Tooltip)
                ) && 
                (
                    this.TooltipMetadata == other.TooltipMetadata ||
                    this.TooltipMetadata != null &&
                    this.TooltipMetadata.Equals(other.TooltipMetadata)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.ValueMetadata == other.ValueMetadata ||
                    this.ValueMetadata != null &&
                    this.ValueMetadata.Equals(other.ValueMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ConditionalParentLabel != null)
                    hash = hash * 59 + this.ConditionalParentLabel.GetHashCode();
                if (this.ConditionalParentLabelMetadata != null)
                    hash = hash * 59 + this.ConditionalParentLabelMetadata.GetHashCode();
                if (this.ConditionalParentValue != null)
                    hash = hash * 59 + this.ConditionalParentValue.GetHashCode();
                if (this.ConditionalParentValueMetadata != null)
                    hash = hash * 59 + this.ConditionalParentValueMetadata.GetHashCode();
                if (this.DocumentId != null)
                    hash = hash * 59 + this.DocumentId.GetHashCode();
                if (this.DocumentIdMetadata != null)
                    hash = hash * 59 + this.DocumentIdMetadata.GetHashCode();
                if (this.GroupName != null)
                    hash = hash * 59 + this.GroupName.GetHashCode();
                if (this.GroupNameMetadata != null)
                    hash = hash * 59 + this.GroupNameMetadata.GetHashCode();
                if (this.OriginalValue != null)
                    hash = hash * 59 + this.OriginalValue.GetHashCode();
                if (this.OriginalValueMetadata != null)
                    hash = hash * 59 + this.OriginalValueMetadata.GetHashCode();
                if (this.Radios != null)
                    hash = hash * 59 + this.Radios.GetHashCode();
                if (this.RecipientId != null)
                    hash = hash * 59 + this.RecipientId.GetHashCode();
                if (this.RecipientIdGuid != null)
                    hash = hash * 59 + this.RecipientIdGuid.GetHashCode();
                if (this.RecipientIdGuidMetadata != null)
                    hash = hash * 59 + this.RecipientIdGuidMetadata.GetHashCode();
                if (this.RecipientIdMetadata != null)
                    hash = hash * 59 + this.RecipientIdMetadata.GetHashCode();
                if (this.RequireAll != null)
                    hash = hash * 59 + this.RequireAll.GetHashCode();
                if (this.RequireAllMetadata != null)
                    hash = hash * 59 + this.RequireAllMetadata.GetHashCode();
                if (this.RequireInitialOnSharedChange != null)
                    hash = hash * 59 + this.RequireInitialOnSharedChange.GetHashCode();
                if (this.RequireInitialOnSharedChangeMetadata != null)
                    hash = hash * 59 + this.RequireInitialOnSharedChangeMetadata.GetHashCode();
                if (this.Shared != null)
                    hash = hash * 59 + this.Shared.GetHashCode();
                if (this.SharedMetadata != null)
                    hash = hash * 59 + this.SharedMetadata.GetHashCode();
                if (this.ShareToRecipients != null)
                    hash = hash * 59 + this.ShareToRecipients.GetHashCode();
                if (this.ShareToRecipientsMetadata != null)
                    hash = hash * 59 + this.ShareToRecipientsMetadata.GetHashCode();
                if (this.TabType != null)
                    hash = hash * 59 + this.TabType.GetHashCode();
                if (this.TabTypeMetadata != null)
                    hash = hash * 59 + this.TabTypeMetadata.GetHashCode();
                if (this.TemplateLocked != null)
                    hash = hash * 59 + this.TemplateLocked.GetHashCode();
                if (this.TemplateLockedMetadata != null)
                    hash = hash * 59 + this.TemplateLockedMetadata.GetHashCode();
                if (this.TemplateRequired != null)
                    hash = hash * 59 + this.TemplateRequired.GetHashCode();
                if (this.TemplateRequiredMetadata != null)
                    hash = hash * 59 + this.TemplateRequiredMetadata.GetHashCode();
                if (this.Tooltip != null)
                    hash = hash * 59 + this.Tooltip.GetHashCode();
                if (this.TooltipMetadata != null)
                    hash = hash * 59 + this.TooltipMetadata.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.ValueMetadata != null)
                    hash = hash * 59 + this.ValueMetadata.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}

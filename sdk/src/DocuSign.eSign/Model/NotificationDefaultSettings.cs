/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// Contains details about the default notification settings for the envelope notifications that senders and signers receive.
    /// </summary>
    [DataContract]
    public partial class NotificationDefaultSettings :  IEquatable<NotificationDefaultSettings>, IValidatableObject
    {
        public NotificationDefaultSettings()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationDefaultSettings" /> class.
        /// </summary>
        /// <param name="SenderEmailNotifications">  An array of email notifications that sets the email the user receives when they are a sender. When the specific email notification is set to true, the user will receive those types of email notifications from DocuSign.   The user inherits the default account sender email notification settings when the user is created. The email notifications are:  * envelopeComplete * changedSigner  * senderEnvelopeDeclined  * withdrawnConsent  * recipientViewed  * deliveryFailed   .</param>
        /// <param name="SignerEmailNotifications">An array of email notifications that specifies the email the user receives when they are a recipient. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account email notification settings when the user is created. .</param>
        public NotificationDefaultSettings(SenderEmailNotifications SenderEmailNotifications = default(SenderEmailNotifications), SignerEmailNotifications SignerEmailNotifications = default(SignerEmailNotifications))
        {
            this.SenderEmailNotifications = SenderEmailNotifications;
            this.SignerEmailNotifications = SignerEmailNotifications;
        }
        
        /// <summary>
        ///   An array of email notifications that sets the email the user receives when they are a sender. When the specific email notification is set to true, the user will receive those types of email notifications from DocuSign.   The user inherits the default account sender email notification settings when the user is created. The email notifications are:  * envelopeComplete * changedSigner  * senderEnvelopeDeclined  * withdrawnConsent  * recipientViewed  * deliveryFailed   
        /// </summary>
        /// <value>  An array of email notifications that sets the email the user receives when they are a sender. When the specific email notification is set to true, the user will receive those types of email notifications from DocuSign.   The user inherits the default account sender email notification settings when the user is created. The email notifications are:  * envelopeComplete * changedSigner  * senderEnvelopeDeclined  * withdrawnConsent  * recipientViewed  * deliveryFailed   </value>
        [DataMember(Name="senderEmailNotifications", EmitDefaultValue=false)]
        public SenderEmailNotifications SenderEmailNotifications { get; set; }
        /// <summary>
        /// An array of email notifications that specifies the email the user receives when they are a recipient. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account email notification settings when the user is created. 
        /// </summary>
        /// <value>An array of email notifications that specifies the email the user receives when they are a recipient. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account email notification settings when the user is created. </value>
        [DataMember(Name="signerEmailNotifications", EmitDefaultValue=false)]
        public SignerEmailNotifications SignerEmailNotifications { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationDefaultSettings {\n");
            sb.Append("  SenderEmailNotifications: ").Append(SenderEmailNotifications).Append("\n");
            sb.Append("  SignerEmailNotifications: ").Append(SignerEmailNotifications).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as NotificationDefaultSettings);
        }

        /// <summary>
        /// Returns true if NotificationDefaultSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of NotificationDefaultSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationDefaultSettings other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SenderEmailNotifications == other.SenderEmailNotifications ||
                    this.SenderEmailNotifications != null &&
                    this.SenderEmailNotifications.Equals(other.SenderEmailNotifications)
                ) && 
                (
                    this.SignerEmailNotifications == other.SignerEmailNotifications ||
                    this.SignerEmailNotifications != null &&
                    this.SignerEmailNotifications.Equals(other.SignerEmailNotifications)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SenderEmailNotifications != null)
                    hash = hash * 59 + this.SenderEmailNotifications.GetHashCode();
                if (this.SignerEmailNotifications != null)
                    hash = hash * 59 + this.SignerEmailNotifications.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
